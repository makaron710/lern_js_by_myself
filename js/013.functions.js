/* 
Обычно именуются глаголомСПрипискойОбъекта (showSection).
Анониманая функция - функция без имени, которая исполльзуется здесь и сейчас.
*/

'use strict';

let num = 20;

function printHellow () {
  console.log('som text');
  num = 10;
};

printHellow();

console.log(num); // 10 - вот об этом никогда не задумывался
//////////////////////////////////////////////////////////////////////
let n = 20;

function printHellow () {
  console.log('som text');
  let n = 10;
  // ^^^ казалось бы будет ошибка
};

printHellow();

console.log(n); // 20 - но ошибки с повторным объявлением в функции не будет
//////////////////////////////////////////////////////////////////////

// Замыкание - это функция со всеми (в т.ч. внешними) переменными которые ей доступны (хз)
let b = 20;

function printHellow () {
  console.log('som text');
  let b = 10;
  console.log(b); // если переменная объявлена в функции, при вызове, здесь метод обратиться к b внутри функции, т.к. сначала идет поиск внутри текущего контекста (или области видимости - пока не знаю как правильно)
  // если переменная не будет объявлена внутри функции, то метод не найдет ее и будет искать на уровне выше и т.д. и возьмет b == 20
};

printHellow();

console.log(b);

/* где-то пишут что замыкание это функция внутри другой функции. 
https://www.youtube.com/watch?v=pahO5XjnfLA */
//////////////////////////////////////////////////////////////////////

// после return в финкции ничего не выполняется, этот код называется unreachable - недоступный.

// результат вызова функции можно поместить в переменную

function ff() {
  let e = 50;
  e = e ** 50 - 10 + 356 - (e ** 90);
  return e;
};

const CALC_E = ff();

console.log(CALC_E);
//////////////////////////////////////////////////////////////////////

// Виды функций

// function declaration - объявление функции, самая обычная функция. Создается до начала выполнения скрипта. Можно вызвать до объявления.
function f() {
  return true;
};

// funcion expression - функция-выражение или функциональное выражение. Создается только когда до нее доходит поток кода (не интерпритатор). Можно вызвать только после объявления.

/* отступление. js динамически транслируемый язык (JIT - Just-In-Time). сначала запускается в интерпретируемом режиме, а потом компилируется в нативный код (т.е. код, исполняемый непосредственно процессором). Интерпретатор - программа которая выполняет исходный код по инструкциям (строчно). Компилятор - программа которая анализирует и переводит исходный код в машинный язык программирования и выполняет его. */

const CALC_N = function() {
  console.log(false);
};
//^^^ обязательна точка с запятой

CALC_N();

// () => - стрелочные функции. Не имеют своего контекста this. Добавлена в ES6.

const CALC_B = (a, b) => a + b;
// или
const CALC_С = (a, b) => { return a + b };
// или
const CALC_Z = b => b + 1;