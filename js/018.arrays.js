/* 

*/
'use strict';

console.dir([]); // Отображает список свойств указанного JavaScript объекта

// свойство .length показывает № последнего индекса массива + 1, поэтому
const arr = [1, 2, 3];
arr[99] = 4;
console.log(arr.length); // 100
// а это потому что
console.log(arr); // [ 1, 2, 3, <96 empty items>, 4 ]

// for of работает только с массивао подобными объектами. А так же с элементами на странице - это псевдо массивы (у них нет методов).

// foreach
arr.forEach((index, item, arraysContent) => {
  console.log(`Элемент с индексом ${index} имеет значение ${item} в массиве ${arraysContent}`);
})
// foreach удобно использовать везде, где можно. У обычных циклов приемущество в возможности использовать break, continue...

// foreach не изменяет массив
const arr2 = [2, 4, 6, 8];
arr2.forEach((i) => {
  arr2[arr2.indexOf(i)] = i / 2; // [ 1, 2, 3, 4 ] костыль
})
console.log(arr2);
// для этого есть .map(), .filter(), .reduce() и т.д., но они возвращают новый массив

// .sort() без аргументов сортирует элементы массива как строки
const arr3 = [1, 2, 10, 11];
console.log(arr3.sort()); // [ 1, 10, 11, 2 ]
// чтобы сортировать числа надо
console.log(arr3.sort((a, b) => {
  return a - b
}));
console.log(arr3.sort((a, b) => {
  return b - a
}));
// .sort() сортирует массив на месте, меняя порядок элементов



/* !!!!!!!!!!!!!!!
почитать как работает .sort()
!!!!!!!!!!!!!! */